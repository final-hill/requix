/*!
 * @license
 * Copyright (C) 2022 Final Hill LLC
 * SPDX-License-Identifier: AGPL-3.0-only
 * @see <https://spdx.org/licenses/AGPL-3.0-only.html>
 */

import GetAllProjectsUseCase from '../../../application/usecases/GetAllProjectsUseCase';
import ProjectListPresentation from './ProjectListPresentation';
import NewProjectCardControl from '../NewProjectCard/NewProjectCardControl.ts.diabled';
import Control from '../../lib/agency/agent/Control';

export default class ProjectListControl extends Control<ProjectListPresentation> {
    // TODO: is an abstraction a collection of use cases?
    // ie. A collection of Commands
    // ie. A collection of command.execute()
    private _getAllProjectsUseCase: GetAllProjectsUseCase;

    constructor(getAllProjectsUseCase: GetAllProjectsUseCase) {
        super();
        this._getAllProjectsUseCase = getAllProjectsUseCase;
    }

    // override async load(): Promise<void> {
    //     this.addChild(new NewProjectCardControl());
    //     /*
    //     this._getAllProjectsUseCase.execute()
    //         ?.then(projects => projects.map(project => new ProjectCardControl({ project })))
    //         .then(projectCardControl => this.addChild(projectCardControl));
    //     */

    //     return super.load();
    // }

    override initPresentation(): ProjectListPresentation {
        return new ProjectListPresentation();
    }
}